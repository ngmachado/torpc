name: Build Native Binaries

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-binaries:
    name: Build ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            target: linux-x64
            rust-target: x86_64-unknown-linux-gnu
            binary-name: libarti_ffi.so
            
          - os: ubuntu-latest
            arch: arm64
            target: linux-arm64
            rust-target: aarch64-unknown-linux-gnu
            binary-name: libarti_ffi.so
            
          - os: macos-latest
            arch: x64
            target: darwin-x64
            rust-target: x86_64-apple-darwin
            binary-name: libarti_ffi.dylib
            
          - os: macos-latest
            arch: arm64
            target: darwin-arm64
            rust-target: aarch64-apple-darwin
            binary-name: libarti_ffi.dylib
            
          - os: windows-latest
            arch: x64
            target: win32-x64
            rust-target: x86_64-pc-windows-msvc
            binary-name: arti_ffi.dll

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}
      
      - name: Setup cross-compilation for ARM64 Linux
        if: matrix.target == 'linux-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config
      
      - name: Build Rust FFI library
        working-directory: rust/arti-ffi
        run: cargo build --release --target ${{ matrix.rust-target }}
      
      - name: Create output directory
        run: mkdir -p lib/${{ matrix.target }}
      
      - name: Copy binary (Unix)
        if: runner.os != 'Windows'
        run: cp rust/arti-ffi/target/${{ matrix.rust-target }}/release/${{ matrix.binary-name }} lib/${{ matrix.target }}/
      
      - name: Copy binary (Windows)
        if: runner.os == 'Windows'
        run: copy rust\arti-ffi\target\${{ matrix.rust-target }}\release\${{ matrix.binary-name }} lib\${{ matrix.target }}\
        shell: cmd
      
      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: torpc-binary-${{ matrix.target }}
          path: lib/${{ matrix.target }}/${{ matrix.binary-name }}
          if-no-files-found: error

  package:
    name: Package binaries
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: download
      
      - name: Create lib directories
        run: |
          mkdir -p lib/darwin-arm64
          mkdir -p lib/darwin-x64
          mkdir -p lib/linux-x64
          mkdir -p lib/linux-arm64
          mkdir -p lib/win32-x64
      
      - name: Move binaries to lib directory
        run: |
          cp download/torpc-binary-darwin-arm64/libarti_ffi.dylib lib/darwin-arm64/
          cp download/torpc-binary-darwin-x64/libarti_ffi.dylib lib/darwin-x64/
          cp download/torpc-binary-linux-x64/libarti_ffi.so lib/linux-x64/
          cp download/torpc-binary-linux-arm64/libarti_ffi.so lib/linux-arm64/
          cp download/torpc-binary-win32-x64/arti_ffi.dll lib/win32-x64/
      
      - name: Create README for the lib directory
        run: |
          cat > lib/README.md << EOF
          # Pre-built binaries for torpc
          
          This directory contains pre-built Arti FFI binaries for various platforms.
          These allow torpc to work without requiring users to install Rust.
          
          ## Platforms
          
          - darwin-arm64: macOS on Apple Silicon (M1/M2)
          - darwin-x64: macOS on Intel
          - linux-x64: Linux on x86_64
          - linux-arm64: Linux on ARM64
          - win32-x64: Windows on x86_64
          
          ## For developers
          
          These binaries are built automatically by GitHub Actions.
          See the workflow in `.github/workflows/build.yml`.
          EOF
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Build TypeScript
        run: |
          bun install
          bun run build
      
      - name: Create package artifact
        uses: actions/upload-artifact@v4
        with:
          name: torpc-package
          path: |
            dist/
            lib/
            package.json
            README.md
            LICENSE
          if-no-files-found: error

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: torpc-package
          path: torpc-package
      
      - name: Zip package
        run: zip -r torpc.zip torpc-package/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: torpc.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to npm on release
  publish:
    name: Publish to npm
    if: startsWith(github.ref, 'refs/tags/v')
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: torpc-package
          path: .
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Update package version from tag
        run: |
          # Extract version from tag (e.g., v1.2.3 -> 1.2.3)
          VERSION=${GITHUB_REF_NAME#v}
          # Update package.json with this version
          npm version $VERSION --no-git-tag-version
      
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}